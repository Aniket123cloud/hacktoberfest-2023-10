You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1. A group of connected 1s forms an island. Two 1s are connected if they share one of their sides with each other.

Return the size of the largest island in the grid after applying this operation.

Example 1:

Input: 
grid = [[1,0],[0,1]]
Output:
3
Explanation:
Change any one 0 to 1 and connect two 1s, then we get an island with area = 3.

def largestIsland(grid):
    def dfs(x, y, island_id):
        if x < 0 or x >= n or y < 0 or y >= n or grid[x][y] != 1:
            return 0

        grid[x][y] = island_id
        size = 1
        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            size += dfs(x + dx, y + dy, island_id)

        return size

    n = len(grid)
    island_sizes = {}  # Mapping from island ID to its size
    island_id = 2  # Start island IDs from 2, as 0 and 1 are reserved
    max_island_size = 0

    # Step 1: Label each island and find their sizes
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                island_sizes[island_id] = dfs(i, j, island_id)
                max_island_size = max(max_island_size, island_sizes[island_id])
                island_id += 1

    # Step 2: Iterate through 0 cells and change them to 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 0:
                neighbor_islands = set()
                for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                    x, y = i + dx, j + dy
                    if 0 <= x < n and 0 <= y < n:
                        neighbor_islands.add(grid[x][y])

                total_size = 1  # The size of the current island
                for island in neighbor_islands:
                    total_size += island_sizes[island]

                max_island_size = max(max_island_size, total_size)

    return max_island_size

# Example usage:
grid = [[1, 0], [0, 1]]
result = largestIsland(grid)
print(result)  # Output: 3
